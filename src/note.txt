// import { useState } from 'react';
// import './App.css';
// import { FirstPage, FourthPage, SecondPage, Steps, ThirdPage, Confirm } from './components';

// function App() {
//   const [activeStep, setActiveStep] = useState(0);
//   const [selectedPlan, setSelectedPlan] = useState('monthly');
//   const [showConfirm, setShowConfirm] = useState(false);

//   const handleNextStep = () => {
//     setActiveStep((prevStep) => prevStep + 1);
//   };

//   const handleConfirmClick = () => {
//     setShowConfirm(true);
//   };

//   const handleBackToForm = () => {
//     setShowConfirm(false);
//     setActiveStep(3);
//   };

//   return (
//     <>
//       <div className="h-screen flex justify-center items-center bg-Magnolia">
//         <div className="w-[900px] flex flex-row bg-White p-4 rounded-[20px]">
//           {/* Side 1: Displaying steps */}
//           <Steps activeStep={activeStep} />
//           {/* Side 2: Displaying content based on the active step */}
//           <div className="flex h-[568px] px-20">
//             <div className="flex flex-col justify-between">
//               {activeStep === 0 && <FirstPage onNextStep={handleNextStep} activeStep={activeStep} />}
//               {activeStep === 1 && (<SecondPage onNextStep={handleNextStep} activeStep={activeStep} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />)}
//               {activeStep === 2 && (<ThirdPage onNextStep={handleNextStep} activeStep={activeStep} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />)}
//               {activeStep === 3 && (<FourthPage onNextStep={handleConfirmClick} activeStep={activeStep} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />)}
//               {showConfirm && <Confirm onBackToForm={handleBackToForm} />}
//             </div>
//           </div>
//         </div>
//       </div>

//       {/* Attribution */}
//       <div className="attribution text-[11px] text-center"> Challenge by{' '}
//         <a href="https://www.frontendmentor.io?ref=challenge" target="_blank" rel="noopener noreferrer" className="text-blueC"> Frontend Mentor </a> .
//         Coded by{' '} <a href="https://devemma.netlify.app/" target="_blank" rel="noopener noreferrer" className="text-blueC"> Emmanuel Tofunmi </a> .
//       </div>
//     </>);
// }

// export default App;

/* eslint-disable no-unused-vars */
import { useState } from 'react';
import './App.css';
import { Confirm, FirstPage, FourthPage, SecondPage, Steps, ThirdPage } from './components';

function App() {
  const [activeStep, setActiveStep] = useState(0);
  const [selectedPlan, setSelectedPlan] = useState('monthly');
  const [showConfirm, setShowConfirm] = useState(false);

  const handleNextStep = () => {
    setActiveStep((prevStep) => prevStep + 1);
  };

  const handleConfirmClick = () => {
    console.log('Confirm button clicked!');
    setShowConfirm(true);
  };

  const handleBackToForm = () => {
    setShowConfirm(false);
    setActiveStep(3);
  };

  return (
    <>
      <div className="h-screen flex justify-center items-center bg-Magnolia">
        <div className="w-[900px] flex flex-row bg-White p-4 rounded-[20px]" >
          {/* Side 1: Displaying steps */}
          <Steps activeStep={activeStep} />
          {/* Side 2: Displaying content based on the active step */}
          <div className="flex h-[568px] w-[600px] px-20">
            <div className="flex flex-col justify-between">
              {activeStep === 0 && <FirstPage onNextStep={handleNextStep} activeStep={activeStep} />}
              {activeStep === 1 && (
                <SecondPage onNextStep={handleNextStep} activeStep={activeStep} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />
              )}
              {activeStep === 2 && (
                <ThirdPage onNextStep={handleNextStep} activeStep={activeStep} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />
              )}
              {activeStep === 3 && !showConfirm && (
                <FourthPage onConfirmClick={handleConfirmClick} setActiveStep={setActiveStep} selectedPlan={selectedPlan} setSelectedPlan={setSelectedPlan} />
              )}
              {showConfirm && <Confirm onBackToForm={handleBackToForm} />}
            </div>
          </div>
        </div>
      </div>

      {/* Attribution */}
      <div className="attribution text-[11px] text-center">
        Challenge by{' '}
        <a href="https://www.frontendmentor.io?ref=challenge" target="_blank" rel="noopener noreferrer" className="text-blueC">
          Frontend Mentor
        </a>
        . Coded by{' '}
        <a href="https://devemma.netlify.app/" target="_blank" rel="noopener noreferrer" className="text-blueC">
          Emmanuel Tofunmi
        </a>
        .
      </div>
    </>
  );
}

export default App;

/* eslint-disable no-unused-vars */
import { useState, useEffect } from "react";
import PropTypes from 'prop-types';
import { plan } from "../constants";

const SecondPage = ({ onNextStep, activeStep, setActiveStep, selectedPlan, setSelectedPlan }) => {
     const [selectedItemId, setSelectedItemId] = useState(null);

     const handleToggle = () => {
          setSelectedPlan((prevPlan) => (prevPlan === 'monthly' ? 'yearly' : 'monthly'));
     };

     const handleItemClick = (id) => {
          setSelectedItemId((prevId) => (prevId === id ? null : id));
     };

     const handleNext = () => {
          if (selectedItemId) {
               onNextStep({
                    selectedPlan,
                    selectedItemId,
                    planDetails: plan.find((item) => item.id === selectedItemId),
               });
          }
     };

     const handleGoBack = () => {
          setActiveStep((prevStep) => Math.max(prevStep - 1, 0));
     };

     useEffect(() => {
          if (activeStep === 1) {
               setSelectedPlan('monthly');
          }
     }, [activeStep, setSelectedPlan]);

     return (
          <>
               <form noValidate className="h-full flex flex-col justify-between w-full">
                    <div className="flex flex-col">
                         <h1 className="mt-10 text-3xl text-Marine-blue font-Ubuntu font-bold">Select your plan</h1>
                         <p className="text-sm text-Cool-gray mt-2">You have the option of monthly or yearly billing.</p>
                         <div className="flex flex-row mt-10 gap-4">
                              {/* plan and price */}
                              {plan.map(({ id, icon, plan, perMonth, perYear, bonus }) => {
                                   return (
                                        <div key={id} className={`flex flex-col border ${selectedItemId === id ? 'bg-Magnolia border-Purplish-blue' : 'border-Light-gray'} hover:border-Purplish-blue cursor-pointer rounded-lg px-4 py-3 gap-12 w-[150px]`} onClick={() => handleItemClick(id)}>
                                             <img src={icon} alt={plan} loading="lazy" className="w-[40px] h-[40px]" />
                                             <div className="flex flex-col gap-[3px]">
                                                  <h2 className="text-Marine-blue font-semibold">{plan}</h2>
                                                  <p className="text-Cool-gray font-light text-sm">{selectedPlan === 'monthly' ? perMonth : perYear}</p>
                                                  {selectedPlan === 'yearly' && (<p className="font-light text-xs text-Marine-blue font-Ubuntu">{bonus}</p>)}
                                             </div>
                                        </div>
                                   );
                              })}
                         </div>
                         <div className="w-full flex justify-center bg-Magnolia rounded-md py-3 mt-8">
                              <div className="flex flex-row gap-5">
                                   <p className="text-Marine-blue font-Ubuntu font-medium text-sm">Monthly</p>
                                   <label htmlFor="check" className="bg-Marine-blue cursor-pointer relative w-10 h-[20px] rounded-full">
                                        <input type="checkbox" id="check" className="sr-only peer" onClick={handleToggle} />
                                        <span className="w-[12px] h-[12px] bg-White absolute left-1 top-[4px] rounded-full peer-checked:left-6 transition-all duration-500" id="toggle" ></span>
                                   </label>
                                   <p className="text-Marine-blue font-Ubuntu font-medium text-sm">Yearly</p>
                              </div>
                         </div>
                    </div>
                    <div className="flex justify-between mb-8">
                         <button type="reset" onClick={handleGoBack} className="text-Cool-gray hover:text-Marine-blue font-medium px-5 py-2 w-fit font-Ubuntu cursor-pointer">Go Back </button>
                         <button type="submit" onClick={handleNext} disabled={!selectedItemId} className="bg-Marine-blue text-White px-5 py-2 rounded-md w-fit font-Ubuntu cursor-pointer"> Next Step </button>
                    </div>
               </form>
          </>
     );
};

SecondPage.propTypes = {
     onNextStep: PropTypes.func.isRequired,
     activeStep: PropTypes.number.isRequired,
     setActiveStep: PropTypes.func.isRequired,
     selectedPlan: PropTypes.string.isRequired,
     setSelectedPlan: PropTypes.func.isRequired,
};

export default SecondPage;

/* eslint-disable no-unused-vars */
import { useState } from "react";
import PropTypes from 'prop-types';
import { planType } from "../constants";

const ThirdPage = ({ onNextStep, activeStep, setActiveStep, selectedPlan }) => {
     const [selectedItemIds, setSelectedItemIds] = useState([]);

     const handleItemClick = (id) => {
          setSelectedItemIds((prevIds) => {
               if (prevIds.includes(id)) {
                    return prevIds.filter((prevId) => prevId !== id);
               } else {
                    return [...prevIds, id];
               }
          });
     };

     const handleNext = () => {
          if (selectedItemIds.length > 0) {
               onNextStep({
                    selectedPlan,
                    selectedItemIds,
                    itemsDetails: planType.filter((item) => selectedItemIds.includes(item.id)),
               });
          }
     };


     const handleGoBack = () => {
          setActiveStep((prevStep) => Math.max(prevStep - 1, 0));
     };

     return (
          <>
               <form noValidate className="h-full flex flex-col justify-between">
                    <div className="flex flex-col">
                         <h1 className="mt-10 text-3xl text-Marine-blue font-Ubuntu font-bold">Pick add-ons</h1>
                         <p className="text-sm text-Cool-gray mt-2">Add-ons help enhance your gaming experience.</p>
                         <div className="flex flex-col mt-10 gap-4">
                              {/* planType */}
                              {planType.map(({ id, planTypeName, planTypeText, planPerMonth, planPerYear }) => {
                                   const isChecked = selectedItemIds.includes(id);
                                   return (
                                        <div key={id} className={`flex flex-row justify-between items-center border ${isChecked ? 'bg-Magnolia border-Purplish-blue' : 'border-Light-gray'} hover:border-Purplish-blue cursor-pointer rounded-lg px-5 py-4 gap-20`} onClick={() => handleItemClick(id)}>
                                             <div className="flex flex-row gap-5">
                                                  <input type="checkbox" name="checkbox" id={`checkbox-${id}`} className="w-5 rounded-full]" checked={isChecked} onChange={() => handleItemClick(id)} />
                                                  <div className="flex flex-col">
                                                       <h2 className="text-Marine-blue font-semibold">{planTypeName}</h2>
                                                       <p className="text-Cool-gray font-light text-sm">{planTypeText}</p>
                                                  </div>
                                             </div>
                                             <p className="text-sm font-normal text-Purplish-blue">{selectedPlan === 'monthly' ? planPerMonth : planPerYear}</p>
                                        </div>
                                   );
                              })}
                         </div>
                    </div>
                    <div className="flex justify-between mb-8">
                         <button type="reset" onClick={handleGoBack} className="text-Cool-gray hover:text-Marine-blue font-medium px-5 py-2 w-fit font-Ubuntu cursor-pointer">Go Back </button>
                         <button type="button" onClick={handleNext} disabled={!selectedItemIds} className="bg-Marine-blue text-White px-5 py-2 rounded-md w-fit font-Ubuntu cursor-pointer"> Next Step </button>
                    </div>
               </form>
          </>
     );
};

ThirdPage.propTypes = {
     onNextStep: PropTypes.func.isRequired,
     activeStep: PropTypes.number.isRequired,
     setActiveStep: PropTypes.func.isRequired,
     selectedPlan: PropTypes.string.isRequired,
};

export default ThirdPage;

/* eslint-disable react/prop-types */
const FourthPage = ({ setActiveStep, onConfirmClick }) => {
     const handleGoBack = () => {
          setActiveStep((prevStep) => Math.max(prevStep - 1, 0));
     };

     const handleConfirm = () => {
          onConfirmClick();
     };

     return (
          <>
               <form noValidate className="h-full flex flex-col justify-between font-Ubuntu" style={{ border: "2px solid red" }}>
                    <div className="flex flex-col">
                         <h1 className="mt-10 text-3xl text-Marine-blue font-Ubuntu font-bold">Finishing up</h1>
                         <p className="text-sm text-Cool-gray mt-2">Double-check everything looks OK before confirming.</p>

                         <div className="flex flex-col mt-10 rounded-[20px]">
                              <div className="flex flex-col p-4 bg-Magnolia w-full gap-5">
                                   <div className="flex flex-row justify-between items-center">
                                        <div className="flex flex-col">
                                             <h4>[plan]</h4>
                                             <p className="text-Cool-gray underline text-sm">Change</p>
                                        </div>
                                        <p>[price]</p>
                                   </div>
                                   <hr />
                                   <div className="flex flex-col">
                                        <div className="flex flex-row justify-between">
                                             <p>[planType]</p>
                                             <p>[price]</p>
                                        </div>
                                   </div>
                              </div>
                              <div className="flex flex-row p-4 justify-between">
                                   <p>Total (per month or per year)</p>
                                   <span className="text-Purplish-blue text-2xl">[total price]</span>
                              </div>
                         </div>
                    </div>
                    <div className="flex justify-between mb-8">
                         <button type="button" onClick={handleGoBack} className="text-Cool-gray hover:text-Marine-blue font-medium px-5 py-2 w-fit font-Ubuntu cursor-pointer">Go Back</button>
                         <button type="button" onClick={handleConfirm} className="bg-Purplish-blue text-White px-5 py-2 rounded-md w-fit font-Ubuntu cursor-pointer"> Confirm</button>
                    </div>
               </form>
          </>
     );
};

export default FourthPage;

Hi Meryam,

Thank you for considering my application. I'm excited about the opportunity to discuss my experience and interest in the Front End Engineering role at Legatics.

I am available for an initial 30-minute coffee chat on Thursday, 14th, at 4:30 pm. I appreciate the opportunity and look forward to our conversation.

Best regards,

[Your Full Name]